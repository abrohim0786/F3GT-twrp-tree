# AUTOGENERATED: README and LICENSE tests (pytest)
# These tests validate repository README and LICENSE basics:
# - File existence and non-emptiness
# - README title heading for Markdown
# - License identification, unreplaced placeholders, and reasonable year
# - Basic Markdown link target sanity
import re
from pathlib import Path
from datetime import datetime
import pytest

README_CANDIDATES = ["README.md", "README.rst", "README.txt", "README"]
LICENSE_CANDIDATES = ["LICENSE", "LICENSE.md", "LICENSE.txt", "COPYING", "COPYING.md", "COPYRIGHT"]
ROOT = Path(__file__).resolve().parent.parent

def _find_first_existing(candidates):
    for name in candidates:
        p = ROOT / name
        if p.exists():
            return p
    return None

def _read_text(path: Path) -> str:
    return path.read_text(encoding="utf-8", errors="ignore")

def test_readme_file_exists():
    p = _find_first_existing(README_CANDIDATES)
    if p is None:
        pytest.fail(f"Expected one of {README_CANDIDATES} in repo root.")

def test_readme_not_empty():
    p = _find_first_existing(README_CANDIDATES)
    if p is None:
        pytest.fail("README file missing.")
    if p.stat().st_size <= 0:
        pytest.fail("README is empty.")

def test_readme_has_title_heading_if_markdown():
    p = _find_first_existing(README_CANDIDATES)
    if p is None:
        pytest.fail("README file missing.")
    if p.suffix.lower() == ".md" or p.name == "README":
        head = "".join(_read_text(p).splitlines(True)[:15])
        if not re.search(r'^\s*#\s+\S', head, re.M):
            pytest.fail("README.md should start with an H1 title.")

def test_license_file_exists():
    p = _find_first_existing(LICENSE_CANDIDATES)
    if p is None:
        pytest.fail(f"Expected one of {LICENSE_CANDIDATES} in repo root.")

def test_license_not_empty():
    p = _find_first_existing(LICENSE_CANDIDATES)
    if p is None:
        pytest.fail("LICENSE file missing.")
    if p.stat().st_size <= 0:
        pytest.fail("LICENSE is empty.")

def test_license_contains_recognized_identifier_or_name():
    p = _find_first_existing(LICENSE_CANDIDATES)
    if p is None:
        pytest.fail("LICENSE file missing.")
    text = _read_text(p).lower()
    recognized = [
        "mit license", "apache license", "apache 2.0", "bsd",
        "gnu general public license", "gpl", "lgpl", "agpl",
        "mozilla public license", "mpl", "isc license", "unlicense", "proprietary"
    ]
    if not any(tok in text for tok in recognized):
        pytest.fail("Could not detect a common license identifier.")

def test_license_year_is_reasonable_if_present():
    p = _find_first_existing(LICENSE_CANDIDATES)
    if p is None:
        pytest.fail("LICENSE file missing.")
    text = _read_text(p)
    years = [int(m.group(0)) for m in re.finditer(r'\b(19|20)\d{2}\b', text)]
    if years:
        y = max(years)
        current = datetime.utcnow().year
        if not (1990 <= y <= current):
            pytest.fail(f"Suspicious year {y}; expected between 1990 and {current}.")

def test_license_placeholders_are_replaced():
    p = _find_first_existing(LICENSE_CANDIDATES)
    if p is None:
        pytest.fail("LICENSE file missing.")
    text = _read_text(p)
    placeholders = ["[year]", "yyyy", "<year>", "year", "full name", "fullname", "<owner>", "copyright holder"]
    pattern = re.compile(r'\b(' + "|".join(re.escape(s) for s in placeholders) + r')\b', re.I)
    if pattern.search(text):
        pytest.fail("Unreplaced placeholders detected in LICENSE.")

def test_readme_links_are_well_formed():
    p = _find_first_existing(README_CANDIDATES)
    if p is None:
        pytest.fail("README file missing.")
    text = _read_text(p)
    md_links = re.findall(r'\[([^\]]+)\]\(([^)]+)\)', text)
    for _, url in md_links:
        url = url.strip()
        if re.match(r'(?i)javascript:', url):
            pytest.fail(f"Insecure link scheme in README: {url}")
        if " " in url:
            pytest.fail(f"Whitespace in link target: {url}")

def test_readme_mentions_license_if_license_present():
    lp = _find_first_existing(LICENSE_CANDIDATES)
    rp = _find_first_existing(README_CANDIDATES)
    if rp is None:
        pytest.fail("README file missing.")
    if lp:
        txt = _read_text(rp).lower()
        if "license" not in txt:
            pytest.fail("README should mention the project's license.")